function [V,s,M,Ti] = random_room_generator_2d(m,n)

r1 = 340*randi([5, 20], 1 , 2);
r2 = 340*randi([-10, 10], 1 , 2);
trans = 340*randi([0, 10], 2 , 1);
ang = randi([0, 360], 1 , 1);
Ti = randi([1, 10], 1 , 1)*ones(1,m+4);

side1 = r1(1);
side2 = r1(2);

disp('side1 length:');
disp(side1);
disp('side2 length:');
disp(side2);
%disp('First vertex of the room:');
%disp(r2);

s_ini = zeros(2,m);
%M_ini = zeros(2,n);
V_ini = zeros(2,4);
all_matrix = zeros(2,m+n);

V_ini(1,1) = r2(1);
V_ini(2,1) = r2(2);

V_ini(1,2) = r2(1) + side1;
V_ini(2,2) = r2(2);

V_ini(1,3) = r2(1) + side1;
V_ini(2,3) = r2(2) + side2;

V_ini(1,4) = r2(1);
V_ini(2,4) = r2(2) + side2;

Rot = [cosd(ang) -sind(ang); sind(ang) cosd(ang)];
R3 = [trans(1) 0; 0 trans(2)];
ones_2_4 = ones(2,4);
ones_2_m = ones(2,m);
ones_2_n = ones(2,n);

V = (Rot*V_ini + R3*ones_2_4)';

slopes = zeros(1,4);
for i = 1:4
    if i<=3
       slopes(1,i) = (V(i+1,2)-V(i,2))/ (V(i+1,1)-V(i,1));
    else
       slopes(1,i) = (V(1,2)-V(i,2))/ (V(1,1)-V(i,1));
    end
end

disp('Slopes are:');
disp(slopes);

perpendicularity = zeros(1,4);
for i = 1:4
    if i<=3
       perpendicularity(1,i) = slopes(1,i)*slopes(1,i+1);
    else
       perpendicularity(1,i) = slopes(1,i)*slopes(1,1);
    end
end
       
disp('perpendicularity check of walls:');
disp(perpendicularity);

x1 = randi([r2(1) + 1, r2(1) + side1 - 1]);
y1 = randi([r2(2) + 1, r2(2) + side2 - 1]);
s_ini(1,1) = x1;
s_ini(2,1) = y1;

if m>=2
for i = 2:m
for k = 1:i-1
x1 = randi([r2(1) + 1, r2(1) + side1 - 1]);
y1 = randi([r2(2) + 1, r2(2) + side2 - 1]);
s_ini(1,i) = x1;
s_ini(2,i) = y1;
while 1
if s_ini(:,i) == s_ini(:,k)
x1 = randi([r2(1) + 1, r2(1) + side1 - 1]);
y1 = randi([r2(2) + 1, r2(2) + side2 - 1]);
s_ini(1,i) = x1;
s_ini(2,i) = y1;
else
break;  
end
end
end
end
end

all_matrix(:,1:m) = s_ini;

for j = m+1:m+n
for l = 1:j-1
x1 = randi([r2(1) + 1, r2(1) + side1 - 1]);
y1 = randi([r2(2) + 1, r2(2) + side2 - 1]);
all_matrix(1,j) = x1;
all_matrix(2,j) = y1;
while 1
if all_matrix(:,j) == all_matrix(:,l)
x1 = randi([r2(1) + 1, r2(1) + side1 - 1]);
y1 = randi([r2(2) + 1, r2(2) + side2 - 1]);
all_matrix(1,j) = x1;
all_matrix(2,j) = y1;
else
break;  
end
end
end
end

M_ini = all_matrix(:,m+1:m+n);

s = (Rot*s_ini + R3*ones_2_m)';
M = (Rot*M_ini + R3*ones_2_n)';

diagonal = sqrt((side1)^2 + (side2)^2);
sour_mic = [s ; M];

count = zeros(m+n,4);
for i = 1:m+n
    for j = 1:4
    dist = sqrt((sour_mic(i,1) - V(j,1))^2 + (sour_mic(i,2) - V(j,2))^2);
    if dist >= diagonal
        count(i,j) = 1;
    else
        count(i,j) = 0;
    end
    end
end

sour_mic_violation = sum(count,2);
disp('Are any sources and microphones lying outside the room?');

count1 = sum(sour_mic_violation,1);

if count1 ==0
    disp('no');
else
    disp('yes, and they are:');
    disp(sour_mic_violation);
    
end

V_plot = [V; V(1,:)];
plot(V_plot(:,1),V_plot(:,2))
title('Room Configuration')
hold on
scatter(s(:,1),s(:,2),'o')
scatter(M(:,1),M(:,2),'*')
hold off


end