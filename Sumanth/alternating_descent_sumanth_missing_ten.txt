function [X,D] = alternating_descent_sumanth_missing_ten(t_D)
dim = 3; 
[n, m] = size(t_D);
    if (n ~= m)
        error('The inpur matrix t_D needs to be a square matrix!')
    end
  z=0;
for i=1:n
   x = t_D(i,i+1:n);
   y=x(:);
   z=[z;y];
end
u= size(z);
v= z(2:u,1);

for j=1:u-1
    for k= j+1:u-1
        for l= k+1:u-1
            for m=l+1:u-1
                for jj=m+1:u-1
                    for kk=jj+1:u-1
                        for ll=kk+1:u-1
                            for mm=ll+1:u-1
                                for jjj=mm+1:u-1
                                    for kkk=jjj+1:u-1
        v(j)=0;
        v(k)=0;
        v(l)-0;
        v(m)=0;
        v(jj)=0;
        v(kk)=0;
        v(ll)=0;
        v(mm)=0;
        v(jjj)=0;
        v(kkk)=0;
        w=v';
        [g,h] = find(triu(ones(n),1)); 
        s = zeros(n);
         s(g + n * (h - 1)) = w;
         s(h + n * (g - 1)) = s(g + n * (h - 1));
         disp('New case');
        [X, D] = alternating_descent_sumanth(s, dim)
            end
        end
    end
end
end
end
end
end
end
end
end